[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\julio\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\julio\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.3 (Oracle Corporation Java 1.8.0_221)
[debug]       Load.loadUnit: plugins took 116.846ms
[debug]       Load.loadUnit: defsScala took 0.4982ms
[debug] [Loading] Scanning directory C:\Users\julio\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\julio\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 27.6156 ms
[debug]           Load.resolveProject(global-plugins) took 59.9534ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\julio\.sbt\1.0\plugins, plugins: List(<none>))) took 130.6913ms
[debug] [Loading] Done in C:\Users\julio\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 154.0534ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3398ms
[debug]     Load.loadUnit(file:/C:/Users/julio/.sbt/1.0/plugins/, ...) took 283.1952ms
[debug]   Load.apply: load took 451.2113ms
[debug]   Load.apply: resolveProjects took 6.651ms
[debug]   Load.apply: finalTransforms took 53.4634ms
[debug]   Load.apply: config.delegates took 7.3494ms
[debug]   Load.apply: Def.make(settings)... took 1254.4908ms
[debug]   Load.apply: structureIndex took 98.0459ms
[debug]   Load.apply: mkStreams took 1.7239ms
[info] loading global plugins from C:\Users\julio\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 41886.7701ms
[debug]           Load.loadUnit: plugins took 27.866ms
[debug]           Load.loadUnit: defsScala took 0.0024ms
[debug] [Loading] Scanning directory D:\Github\julio-repos\data-engineering-bootcamp\spark\scala\project
[debug]             Load.loadUnit: mkEval took 9.2864ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\Github\julio-repos\data-engineering-bootcamp\spark\scala\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.4216 ms
[info] loading settings for project scala-build from idea.sbt ...
[debug]               Load.resolveProject(scala-build) took 3.9723ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scala-build, base: D:\Github\julio-repos\data-engineering-bootcamp\spark\scala\project, plugins: List(<none>))) took 5.8362ms
[debug] [Loading] Done in D:\Github\julio-repos\data-engineering-bootcamp\spark\scala\project, returning: (scala-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2032.6731ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.8179ms
[debug]         Load.loadUnit(file:/D:/Github/julio-repos/data-engineering-bootcamp/spark/scala/project/, ...) took 2066.5466ms
[debug]       Load.apply: load took 2068.2415ms
[debug]       Load.apply: resolveProjects took 0.0967ms
[debug]       Load.apply: finalTransforms took 6.215ms
[debug]       Load.apply: config.delegates took 0.4277ms
[debug]       Load.apply: Def.make(settings)... took 70.4693ms
[debug]       Load.apply: structureIndex took 30.2453ms
[debug]       Load.apply: mkStreams took 0.0023ms
[info] loading project definition from D:\Github\julio-repos\data-engineering-bootcamp\spark\scala\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 4247.9662ms
[debug]     Load.loadUnit: defsScala took 0.0021ms
[debug] [Loading] Scanning directory D:\Github\julio-repos\data-engineering-bootcamp\spark\scala
[debug]       Load.loadUnit: mkEval took 0.4686ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\Github\julio-repos\data-engineering-bootcamp\spark\scala, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.079 ms
[info] loading settings for project scala from build.sbt ...
[debug]         Load.resolveProject(scala) took 32.4123ms
[debug]       Load.loadTransitive: finalizeProject(Project(id scala, base: D:\Github\julio-repos\data-engineering-bootcamp\spark\scala, plugins: List(<none>))) took 35.6534ms
[debug] [Loading] Done in D:\Github\julio-repos\data-engineering-bootcamp\spark\scala, returning: (scala)
[debug]     Load.loadUnit: loadedProjectsRaw took 1171.7069ms
[debug]     Load.loadUnit: cleanEvalClasses took 15.9038ms
[debug]   Load.loadUnit(file:/D:/Github/julio-repos/data-engineering-bootcamp/spark/scala/, ...) took 5436.9993ms
[debug] Load.apply: load took 5439.7032ms
[debug] Load.apply: resolveProjects took 0.1487ms
[debug] Load.apply: finalTransforms took 19.6795ms
[debug] Load.apply: config.delegates took 0.3795ms
[debug] Load.apply: Def.make(settings)... took 57.3278ms
[debug] Load.apply: structureIndex took 20.8437ms
[debug] Load.apply: mkStreams took 0.0033ms
[info] set current project to SparkScalaCourse (in build file:/D:/Github/julio-repos/data-engineering-bootcamp/spark/scala/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 60669 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 60669, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to SparkScalaCourse (in build file:/D:/Github/julio-repos/data-engineering-bootcamp/spark/scala/)
[debug] > Exec(idea-shell, None, None)
